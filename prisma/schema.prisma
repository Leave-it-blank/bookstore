generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String?
  password String
  city     String
  role     Role     @default(USER)
  orders   Order[]
  profile  Profile?
  Cart     Cart?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Chapter {
  id           Int         @id @unique @default(autoincrement())
  number       Float       @unique
  title        String      @db.MediumText
  category     CATEGORY    @default(CHAPTER)
  price        Float
  imageUrl     String      @db.LongText
  heading      String      @db.LongText
  introduction String      @db.LongText
  goalsTitle   String      @db.LongText
  goals        String      @db.LongText
  productId    Int
  Product      Product     @relation(fields: [productId], references: [id])
  CartItems    CartItems[]
  OrderItem    OrderItem[]
  links        links[]

  @@index([productId], map: "Chapter_productId_fkey")
}

model Author {
  id         Int      @id @unique @default(autoincrement())
  name       String
  jobTitle   String   @db.MediumText
  degree     String   @db.MediumText
  college    String   @db.MediumText
  city       String
  about      String   @db.LongText
  imageUrl   String   @db.LongText
  linkdInUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id          Int         @id @unique @default(autoincrement())
  orderNumber String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      OrderStatus
  total       Float
  customerId  Int
  pay_url     String?     @db.MediumText
  customer    User        @relation(fields: [customerId], references: [id])
  items       OrderItem[]

  @@index([customerId], map: "Order_customerId_fkey")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  price      Float
  productId  Int?
  chapterId  Int?
  orderId    Int
  link       String?
  activedate DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id])
  Product    Product? @relation(fields: [productId], references: [id])
  Chapter    Chapter? @relation(fields: [chapterId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model Product {
  id            Int              @id @default(autoincrement())
  titleSlug     String           @unique
  title         String
  category      Product_category @default(BOOK)
  thumbUrl      String           @db.LongText
  rating        Float
  description   String?          @db.LongText
  priceDigital  Float
  priceHardCopy Float
  authorId      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime
  Chapter       Chapter[]
  OrderItem     OrderItem[]
  CartItems     CartItems[]
  links         links[]

  @@index([authorId], map: "Product_authorId_fkey")
}

model PreOrder {
  id        Int      @id @unique @default(autoincrement())
  itemID    String
  itemName  String
  itemType  String
  type      String
  quantity  String
  price     String
  firstName String
  lastName  String
  email     String
  address   String
  city      String
  phone     String
  state     String
  zip       String
  country   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int         @id @unique @default(autoincrement())
  userId    Int         @unique
  total     Float?      @default(0)
  discount  Float?
  promo     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  CartItems CartItems[]
}

model CartItems {
  id        Int              @id @unique @default(autoincrement())
  cartId    Int
  productId Int?
  chapterId Int?
  quantity  Int
  price     Float
  category  Product_category
  type      String           @default("DIGITAL")
  product   Product?         @relation(fields: [productId], references: [id])
  chapter   Chapter?         @relation(fields: [chapterId], references: [id])
  cart      Cart             @relation(fields: [cartId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum CATEGORY {
  BOOK
  CHAPTER
}

enum OrderStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum Product_category {
  BOOK
  CHAPTER
}

model sessions {
  id      String @unique
  userId  Int
  orderId Int
}

model links {
  id            Int      @id @unique @default(autoincrement())
  productId     Int?     @unique
  chapterNumber Float?   @unique
  link          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Product       Product? @relation(fields: [productId], references: [id])
  Chapter       Chapter? @relation(fields: [chapterNumber], references: [number])
}

model promo_codes {
  id          Int      @id @unique @default(autoincrement())
  code        String   @unique
  discount    Float    @default(0)
  limit       Int      @default(10)
  description String?  @db.MediumText
  createdAt   DateTime @default(now())
}
